<?php

namespace EvenementBundle\Repository;

/**
 * EvenementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvenementRepository extends \Doctrine\ORM\EntityRepository
{
    public function rechercheAll($categorie,$date,$adresse){
        $req = $this->getEntityManager()->createQuery("select v from EvenementBundle:Evenement v 
              WHERE v.categorie='$categorie' OR v.startTime='$date' OR v.adresse>='$adresse'")
            ->getResult();
        return $req;
    }
    public function count($id){
        $query=$this->getEntityManager()
            ->createQuery("update EvenementBundle:Evenement e set e.nbrParticipants=e.nbrParticipants+1 where e.id='$id'");
        $query->getResult();
        $query2=$this->getEntityManager()
            ->createQuery("select e from EvenementBundle:Evenement e where e.id='$id'");
        return $query2->getResult();
    }

    //Changement de stratégie

    public function liste_des_evenements_en_cours()
    {
        $date=new \DateTime();
        $d=$date->format('Y-m-d H:i:s');
        $req = $this->getEntityManager()->createQuery("select v from EvenementBundle:Evenement v 
              WHERE v.startTime >'$d'")
            ->getResult();
        return $req;
    }

    public function liste_des_evenements_passes()
    {
        $date=new \DateTime();
        $d=$date->format('Y-m-d H:i:s');
        $req = $this->getEntityManager()->createQuery("select v from EvenementBundle:Evenement v 
              WHERE v.startTime < '$d'")
            ->getResult();
        return $req;
    }

    public function liste_des_evenements_par_categorie(array $categoryNames)
    {
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb
            ->innerJoin('a.categorie', 'c')
            ->addSelect('c')
        ;

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.nom', $categoryNames));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

        // Enfin, on retourne le résultat
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }


    public function SupprimerEvenement($id)
    {
        $this->SupprimerCommentsEvenement($id);
        $req = $this->getEntityManager()->createQuery("delete from EvenementBundle:Evenement v 
              WHERE v.id = '$id'")
            ->execute();
    }

    public function SupprimerCommentsEvenement($idobjet)
    {
        $req = $this->getEntityManager()->createQuery("delete from AppBundle:Commentaire v 
              WHERE v.type = '4' AND v.idobjet = '$idobjet'")
            ->execute();
    }

    public function getAllCommentsEvenement()
    {
        $idobjet=4;
        $req = $this->getEntityManager()->createQuery("select v from AppBundle:Commentaire v 
              WHERE v.type = 4 ")
            ->execute();
    }
}
